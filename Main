import java.util.*;

public class Minimax {
	
	private Scanner scan = new Scanner(System.in);
	
	private static int MAX_DEPTH = 4;
	private int[] cpuMove;

	/*
     * Method to show the board as a starting phase
	 * @param a double String array to display the 8x8 board 
	 * */	
    private void printBoard(String[][] spelBord) {
		int bordStorlek = spelBord.length;
		System.out.println("Spelplanen: ");
		System.out.print("      " + 1 );
		for(int i = 2; i < 9; i++) {
			System.out.print("   " +  i + "");
		}
		System.out.print('\n' + "    ---------------------------------" + '\n');
		for(int rad = 0; rad < bordStorlek; rad++) {
			System.out.print(rad + 1 + "   |");
			for(int kolumn = 0; kolumn < bordStorlek; kolumn++) {
				if(spelBord[rad][kolumn] == null) System.out.print("  " + " |");
				else System.out.print(" " + spelBord[rad][kolumn] + " |");
			}
			System.out.print('\n' + "    ---------------------------------" + '\n');
		}
	}
	
	/*
	 * Gets the player input with a scanner
	 * @return the players input as an int
	 */
	private int getPlayerInput() {
		System.out.println("Vill du börja spelet? ja(1), nej(0):");
		int input = scan.nextInt();
		return input;
	}
	
	/*
	 * Checks the input from the player
	 */
	private int[] readPlayerInput() {
		int[] input = new int[2];
		System.out.println("Vilken rad väljer du: ");
		int rad = scan.nextInt() -1;
		input[0] = rad;
		System.out.println("Vilken kolumn väljer du: ");
		int kolumn = scan.nextInt() -1;
		input[1] = kolumn;
		

		return input;
	}
	
	/*
	 * Method to check if there is a win
	 */
	private boolean checkWin(Node node, String player) {
		return checkWinRow(node, player) == true || checkWinColumn(node, player) == true || checkWinDiagonal(node, player) == true ? true : false;
	}
	
	/*
	 * Method Checks for win in the row, if it have 5 in a row it returns true
	 * Contains checks, check for null or if the spot is already taken the counter wont update
	 * @return if there is five in a row or not
	 */
	private boolean checkWinRow(Node node, String player) {
		
	      int count = 0;
	       
	      for(int row = 0; row < node.gameBoard.length; row++) {
	    	  count = 0;//update count --> could be just inatilized here
	    	  for(int col = 0; col < node.gameBoard[row].length; col++) {
	    		  if(node.gameBoard[row][col] == player && count < 5) {
	    			 
	    			  ++count;
	    			  if(count >= 5)
	    			  	return true;
	    			  
	    		  }else {
	    			  count = 0;
	    		  }
	    	  }
	      }
	    	 
	        return false;
	    }
	
	/*
	 * Method Checks for win in the column, if it have 5 in a row it returns true
	 * Contains checks, check for null or if the spot is already taken the counter wont update
	 * @return if there is five in a column or not
	 */
	private boolean checkWinColumn(Node node, String player) {

	      int count = 0;
	      
	      for(int row = 0; row < node.gameBoard.length; row++) {
	    	  count = 0;//update count
	    	  for(int col = 0; col < node.gameBoard[row].length; col++) {
	    		  if(node.gameBoard[col][row] == player && count < 5) {
	    			  		++count;
	    			  		if(count >= 5)
	    			  			return true;
	    		  }else {
	    			  count = 0;
	    		  }
	    	  }
	      }
	        return false;
	}
	
	/*
	 * First from right to left
	 * Second is left to right
	 */
	private boolean checkWinDiagonal(Node node, String player){
		return getWinDiagonalLeft(node, player) || getWinDiagonalRight(node, player);
    }
	
	/*
	 * Detects winner diagonally going from the left side to the right
	 * First part of the method detects win the left half of the matrix
	 * The second half of the method detects win the right half of the matrix
	 * 
	 * @param node gives access to the player and to the board   
	 * @return true if there is 5 in a row for a player
	 */
	private boolean getWinDiagonalLeft(Node node, String player) {
		 //left to right down part
		int count = 0;
		    for (int k = 0; k < node.gameBoard.length; k++) {
		    	count = 0;//reset the counter
		        for (int row = k, col = 0; row <node.gameBoard.length && col < node.gameBoard[row].length; row++, col++) {
		            if(node.gameBoard[col][row] == player && count < 5) {
		                ++count;
		                if(count >= 5)
		                    return true;
		            }else {
		                count = 0;
		            }
		        }
	    }
	  //left to right down part
	    count = 0;
	    for (int k = 1; k < node.gameBoard.length; k++) {
	    	count = 0;//reset the counter
	        for (int row = k, col = 0; row <node.gameBoard.length && col < node.gameBoard[row].length; row++, col++) {
	            if(node.gameBoard[row][col] == player && count < 5) {
	                ++count;
	                if(count >= 5)
	                    return true;
	            }else {
	                count = 0;
	            }
	        }
	    }
	    return false;
	}
	
	/*
	 * Detects winner diagonally going from the right side to the left
	 * First part of the method detects win the left half of the matrix
	 * The second half of the method detects win the right half of the matrix
	 * 
	 * @param node gives access to the player and to the board   
	 * @return true if there is 5 in a row for a player
	 */
	private boolean getWinDiagonalRight(Node node, String player) {
		 int count = 0;
		 //upper part of right to left
		    for (int k = 0; k < node.gameBoard.length; k++) {
		    	count = 0;
		        for (int row = k, col = 0; row >= 0 && col < node.gameBoard[row].length; row--, col++) {
		            if(node.gameBoard[row][col] == player && count < 5) {
		                ++count;
		                if(count >= 5)
		                    return true;
		            }else {
		                count = 0;
		            }
		        }
		    }
		    count = 0;
		  //down part of right to left
		    for (int k = 1; k < node.gameBoard.length; k++) {
		    	count = 0;
		        for (int row = node.gameBoard.length - 1, col = k; row >= 0 && col < node.gameBoard[row].length; row--, col++) {
		            if(node.gameBoard[col][row] == player && count < 5) {
		                ++count;
		                if(count >= 5)
		                    return true;
		            }else {
		                count = 0;
		            }
		        }
		    }
		    return false;
	}
	
	/*
	 * This method sets the players move on the board 
	 * 
	 * @param node gives access to the game board
	 * @param cord is an int[] that holds the possible moves for both row and column (x,y) position
	 * @param player is the player that will be put in the position
	 */
	private void setBoardValue(Node node, int[] cord, String player) {
		 node.gameBoard[cord[0]][cord[1]] = player;
	}
	 
	/*
	 * check for successor move (all possible moves) and saves it in an arrayList
	 * 
	 * @param node gives access to the game board
	 * @return a list that hold all the free spaces on the board
	 * */
	private List<int[]> getSuccessorMove(Node node){
		List<int[]> list= new ArrayList<>();
		
		for(int i = 0; i < node.gameBoard.length; i++) {
			for(int j = 0; j < node.gameBoard.length; j++) {
				if(node.gameBoard[i][j] == null)
					list.add(addToSuccessorList(i,j));
			}
		}
		return list;
	}
	
	/*
	 * SuccessorList ads all the values to an array and returns it
	 * 
	 * @param row for the game boards row
	 * @param column for the game boards columns
	 * @return numberArray which hold all the possible moves the computer can take
	 */
	private int[] addToSuccessorList(int row, int column) {
		int[] numberArray = new int[2];
		numberArray[0] = row;
		numberArray[1] = column;
		
		return numberArray;
	}

	/*
	 * Method to count the score, it counts higher score the more you have in a row
	 * @param node gives access to the game board
	 * @param player is the players token
	 * 
	 * @return the collected score
	 * */
	private int getScore(Node node, String player) {
		int score = 1;//start score
		int count;
		
		try {
		//go through the matrix 
		for(int row = 0; row < node.gameBoard.length; row++) {
			for(int column = 0; column < node.gameBoard.length; column++) {
				int nextInRow = column;//to not to reset column
				count = 1;
				//go through horizontally
				while(node.gameBoard[nextInRow][row] == player) {
					score *= count;//give point
					nextInRow++;//go to next position on the right
					
					if(count > 1) {
						boolean before = false;
						boolean after = false;
						if(column > 0 && node.gameBoard[nextInRow-2][row] == null) {
							score += 50*count;
							before = true;
						}
					if(nextInRow < node.gameBoard.length && node.gameBoard[nextInRow][row] == null) {
						score += 50*count;
						after = true;
					}
					if(count == 4 && before || after) {
						score += 5000;
						}
					}
					count++;//count amount in the row

					if(!(nextInRow < node.gameBoard.length))
						break;
				}
				
				//go through vertical
				int nextInColumn = row;
				while(node.gameBoard[column][nextInColumn] == player) {
					score *= count;
					nextInColumn++;
					
					if(count > 1) {
						boolean before = false;
						boolean after = false;
						
						if(column > 0 && node.gameBoard[column][nextInColumn-2] == null) {
							score += 50*count;
							before = true;
						}
						 if(nextInColumn < node.gameBoard.length && node.gameBoard[column][nextInColumn] == null) {
							score = 50*count;
							after = true;
						}
						 if(count == 4 && before && after)
							score += 5000;
					}
				
					count++;
					
					if(!(nextInColumn < node.gameBoard.length))
						break;
				}
				
				//Diagonally left to right 
				int nextPositionRow = row;
				int nextPositionColumn = column;
				while(node.gameBoard[nextPositionColumn][nextPositionRow] == player) {
					score *= count;
					count++;
					nextPositionRow++;
					nextPositionColumn++;
					
					if(nextPositionRow < node.gameBoard.length || nextPositionColumn < node.gameBoard.length)
						break;
				}
				
				//Diagonally right to left
				int rightRow = row;
				int rightColumn = column;
				while(node.gameBoard[rightColumn][rightRow] == player) {
					score *= count;
					count++;
					rightRow++;
					rightColumn--;
					
					if(rightRow < node.gameBoard.length || rightColumn < node.gameBoard.length)
						break;
				}
			}
		}
	}catch(IndexOutOfBoundsException e) {}
		return score;
    }
	
	/*
	 * Takes the score from player and cpu and devides the two
	 * 
	 * @param node gives access to the gameboard and to the player
	 * @return the cpu point decided by the playerscore
	 * */
	private int score(Node node) {
		int playerScore = getScore(node, node.player);
		int cpuScore = getScore(node, node.cpu);
		
		return cpuScore - playerScore;
	}
	
	/*
	 * Calculates a winnings score
	 * @param node that gives access to the game boards size
	 * @return the score count times the boards size
	 * */
	private int winningScore(Node node) {
		//its 1 bc if it would be 0 and we multiply it it would always be 0, so draw
		int scoreCount = 1;
		
		for(int i = 0; i < node.gameBoard.length; i++) {
			scoreCount *= 10;
		}
		
		return scoreCount * node.gameBoard.length;
	}
	
	//minMax is a massive method, containing the miniMax algorithm
	//it simulates the possible moves till a win or till max depth is reached
	private int minMax(Node node, String player, int depth, int alpha, int beta) {
		
		if(depth < 0 || depth > MAX_DEPTH)
				throw new IllegalArgumentException();
		
		//if the simulation reached a point of winning it returns the value of winning for the CPU
		if(checkWin(node, node.cpu) == true) 
			return winningScore(node); 
			
		//if the simulation reached a point of winning  it returns the value of winning for the Player
		if(checkWin(node, node.player) == true)
			return -winningScore(node) / depth;
		
		//gets all the possible moves (successor moves) if its empty return a 0 (a.k.a a draw)
		List<int[]> list = getSuccessorMove(node);
		if(list.isEmpty())
			return 0;
		
		//or if the maxDepth is reached returned the current score
		if(depth == MAX_DEPTH) {
			return score(node) / depth; 
		}
		
		//Variable to hold the best move 
		int[] bestMove = null;
		
		if(player.equals(node.cpu)) {
			
			for(int i = 0; i < list.size(); ++i) {
				int[] cord = list.get(i);
				int x = cord[0];
				int y = cord[1];
				
				//problem variable
				node.gameBoard[x][y] = player;
				
				int score = minMax(node, node.player, depth + 1, alpha, beta);//dator
				
				//new best move have been found update it
				if(score > alpha) {
					alpha = score;
					bestMove = cord;
				}
				
				node.gameBoard[x][y] = null;//restores the value
				
				//alpha beta pruning 
				if(alpha >= beta)
					break;
		}
			
			cpuMove = bestMove;//saves best move for CPU in a global variable
			
			return alpha;//Returns best move for maximizing player alpha 
			
		}else {
			for(int i = 0; i < list.size(); ++i) {
				var cord = list.get(i);
				int x = cord[0];
				int y = cord[1];
				
				//place the token on the board
				node.gameBoard[x][y] = node.player;
				
				int score = minMax(node, node.cpu, depth + 1, alpha, beta);//spelare
				
				if(score < beta) {
					beta = score;
					bestMove = cord;
				}
				
				node.gameBoard[x][y] = null;

				if(alpha >= beta)
					break;
			}
		}
		
		cpuMove = bestMove;//saves the best move
		
		return beta;//returns the lowest value
	} 
	
	/*
	 * getter for the best move
	 * */
	private int[] getCpuMove() {
		return cpuMove;
	}
	
	/*
	 * The computers move, it uses the minMax method to calculate the best position and puts it there
	 * with the setBoardValue method, it prints out the updated board and checks for win, if there was no win its the players turn
	 * 
	 * @param node gives access to the Node class
	 * */
	private void cpuMove(Node node) {
	
		long start = System.currentTimeMillis();
		minMax(node, node.cpu, 0, Node.ALPHA, Node.BETA); 
		setBoardValue(node, getCpuMove(), node.cpu);
		System.out.println("Datorn choosed place " + Arrays.toString(getCpuMove()) + " within " + (System.currentTimeMillis() - start) + "ms");
		printBoard(node.gameBoard);
		
		if(checkWin(node, node.cpu) == true) 
			System.out.println("Computer win");
		else
			playerMove(node);
	}	

	/*
	 * Players move read the players input and display it on the board
	 * Print out the board with the updates input and check for win
	 * if no win was made its the computers turn to make a move
	 */
	private void playerMove(Node node) {
		int[] player = readPlayerInput();
		
		if(node.gameBoard[player[0]][player[1]] == null)
			node.gameBoard[player[0]][player[1]] = node.player; //puts the players token at the right place
		else {
			System.out.println(" cant place it there");
			playerMove(node);
		}
			
			printBoard(node.gameBoard);
			if(checkWin(node, node.player) == true) 
				System.out.println("You win");
			else 
				//playerMove(node); 
				cpuMove(node);
			
	}
	
	/*
	 * This method runs the game play such as the showing the board
	 * Getting the inputs and controls the AI
	 */
	private void run() {
		Node node = new Node();
		printBoard(node.gameBoard);
		int player = getPlayerInput();
		
		if(player == 1) 
			playerMove(node);
		else if(getSuccessorMove(node).isEmpty()) {
			System.out.println("its a draw");return;}
		else 
			cpuMove(node);
	
	}
	
	/*
	 * Main method runs the game
	 */
	public static void main(String[] args) {
		Minimax m = new Minimax();
		m.run();
	}
}
